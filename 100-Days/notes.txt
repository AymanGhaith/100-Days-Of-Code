3-26:
    - code formatting, plugin: use Prettier for code formatting. (option + shift + F)
    - go to code -> preferences -> settings -> formatter (select prettier)
    - vscode left bar called activity bar.

4-35:
    white element: element has no content between open and closing tag.

4-37:
    no throttling: in network tap you can check the website for different connection speed.

4-38:
    element id naming: use dash notation --> id="part-one". all-lowercase

4-39:
    css bold: use font-weight: bold;

5-41:
    <pre>...</pre>: preformatted text
    "HTML entities": to print > or < ,   &gt;   (greater than)

5-43:
    text-align: align the content of the element not the element it self, so we can't use it for centering the element.
    centering: you can use the text-align for a parent element in case of an image (wrap the image with a div).
    ** CSS structure: try to make it same as html structure, if there is a style for body, make it in the top of the css file.

6-50:
    Descendants: Children of children
    Ancestor: the root or the higher level
    Sibling: on the same level

6-51
    Inheritance: in CSS only selected properties are inherited (width can't be inherited).
    Cascading: multi css rules applied on the same html element.
    Specificity: the more specific selector's rule win.
    preconnect: link type a hint to browsers that the user is likely to need resources from the target resource's origin, to improve user exp.

7-61
    CSS Selectors:
        - type: element name (h1, p)
        - id: id of element
        - group: use comma ( , ) to apply on more than one selector, type or id or class ( h1, .red, #item1)
        - class: class of element
    CSS Combinator:
        - Descendants: using space, ex (li p) will select all paragraphs with li ancestor ( not mandatory to be the direct parent)
        - Child: using greater than ( > ) char, ex ( h2 > p ) will select all paragraphs which has the parent h2

8-65
    - inline elements special rules for margin and padding top and bottom:
        surrounded element's margin ends on the content of the anchor (inline element)
        if there is padding and the previous block element (p) has no margin, the anchor element will be displayed over the paragraph
        we can solve this by adding margin for the p element which will push the content of the anchor.
        but much better is by using the display property of the anchor to block. or much better inline-block.
    - display: inline-block or block.

8-66
    - margin collapsing: in block elements there is an issue in vertical margin between 2 elements, it will take the bigger one,
        but in case of one of them is inline-block, it will take both margins.

8-68
    - span element: non-semantic inline element.

8-69
    - div element: non-semantic block element.
    - use semantic tags as much as you can.

8-71
    - vertical margins can't be applied on inline (non-replaced) element, so need to be change the display.
    - 2 types of inline elements:
        1- replaced : like "img", the element replaced by an image from another page (link), vertical margin can be applied.
        2- non-replaced: like anchor "a"

9-77
    - link google font before the style file because it is mentioned there.

9-79
    - text-align: aligns the text content or the inner content (in-line content), but for block content use margin.
    - <h1>text</h1>: text inside the h1 is inline-content, but the h1 element is not.

9-80
    - image size: just set the width, the browser will keep the aspect ratio for the height.
    - padding or margin: used padding for header, because if he used the margin it will collapsed (margin collapsing) with the inner H1 element.

