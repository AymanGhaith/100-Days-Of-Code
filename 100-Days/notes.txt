this is new update
this is the second test
2-26:
    - code formatting, plugin: use Prettier for code formatting. (option + shift + F)
    - go to code -> preferences -> settings -> formatter (select prettier)
    - vscode left bar called activity bar.

2-35:
    white element: element has no content between open and closing tag. (there is no closing tag like "link").

2-37:
    no throttling: in network tap you can check the website for different connection speed.

2-38:
    element id naming: use dash notation --> id="part-one". all-lowercase

2-39:
    css bold: use font-weight: bold;

2-41:
    <pre>...</pre>: preformatted text
    "HTML entities": to print > or < ,   &gt;   (greater than)

2-43:
    text-align: align the content of the element not the element it self, so we can't use it for centering the element.
    centering: you can use the text-align for a parent element in case of an image (wrap the image with a div).
    ** CSS structure: try to make it same as html structure, if there is a style for body, make it in the top of the css file.

3-55:
    Descendants: Children of children
    Ancestor: the root or the higher level
    Sibling: on the same level

3-56
    Inheritance: in CSS only selected properties are inherited (width can't be inherited).
    Cascading: multi css rules applied on the same html element.
    Specificity: the more specific selector's rule win.
    preconnect: link type a hint to browsers that the user is likely to need resources from the target resource's origin, to improve user exp.

3-61
    CSS Selectors:
        - type: element name (h1, p)
        - id: id of element
        - group: use comma ( , ) to apply on more than one selector, type or id or class ( h1, .red, #item1)
        - class: class of element
    CSS Combinator:
        - Descendants: using space, ex (li p) will select all paragraphs with li ancestor ( not mandatory to be the direct parent)
        - Child: using greater than ( > ) char, ex ( h2 > p ) will select all paragraphs which has the parent h2

3-65
    - inline elements special rules for margin and padding top and bottom:
        surrounded element's margin ends on the content of the anchor (inline element)
        if there is padding and the previous block element (p) has no margin, the anchor element will be displayed over the paragraph
        we can solve this by adding margin for the p element which will push the content of the anchor.
        but much better is by using the display property of the anchor to block. or much better inline-block.
    - display: inline-block or block.

3-66
    - margin collapsing: in block elements there is an issue in vertical margin between 2 elements, it will take the bigger one,
        but in case of one of them is inline-block, it will take both margins.

3-68
    - span element: non-semantic inline element.

3-69
    - div element: non-semantic block element.
    - use semantic tags as much as you can.

3-71
    - Vertical margins can't be applied on inline (non-replaced) element, so need to be change the display.
    - 2 types of inline elements:
        1- replaced : like "img", the element replaced by an image from another page (link), vertical margin can be applied.
        2- non-replaced: like anchor "a"

4-77
    - link google font before the style file because it is mentioned there.
    - link of shared css before the page css

4-79
    - text-align: aligns the text content for the inner content (in-line content), but for block content use margin.
    - <h1>text</h1>: text inside the h1 is inline-content, but the h1 element is not.

4-80
    - image size: just set the width, the browser will keep the aspect ratio for the height.
    - padding or margin?: used padding for header, because if he used the margin it will collapsed (margin collapsing) with the inner H1 element.

4-82
    - main element center: we can't center it by the text-align because the content (main) is not an inline content, it is a block.

4-83
    - lists styles: by default there is margin and left padding.
    - list styles: you can add left border !! but add it to all list items elements and change the color of what you want special extra important.
    - style file organizing: put the element selectors first then put the class selectors.

4-84
    - anchor links: can point not only to html page, it also can linked to files to be downloaded (href="file-name.pdf").
    - non-inheritable properties: these in developer tools appears in the inherited section but with some opacity or transparency,
    not with filled colors same as inherited props. (so the whole class shown in the inherited section but not all of them applied to the element)

4-85
    - bold, strong and em: em and strong are SEMANTIC tags in order to allow screen reader to read the text, but bold is only a style which will not be read.
    - strong is stronger than em.
    - strong will add the text-weight: bold, automatically.
    - use section semantic tag to add sections inside main tag.

5-90
    - netlify drop: https://app.netlify.com/drop

5-92
    - fav Icon: try to empty cash and hard reload, will get an 404 error for the favicon
    - create favicon: favicon generator, favicon.io or any website,
    - one of the generated icons can be used as bookmark for mobile app.
    - take the one with ico extension.
    <link rel="icon" href="images/favicon.ico" type="image/x-icon">
    - following are provided by the favicon.io website.
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">

5-93
    - it is better to use absolute path in case of deploy to server since the folder you deploy is the root folder. /images/tst.png
    - it is also better for errors if you moved a file from its location.
    - and for navigating to the root index. just put href="/"
    - we can use relative path to point to a parent folder using: href="../"

6-98
    - terminal and shell are different, terminal is the application you run other apps into it like shell (zsh)
    - zsh : open new window and choose the mood

6-100
    - homebrew: package installer for mac

6-105
    - git branch -m newName: change the name of the branch
    - merging: checkout the destination branch then git merge featureBranch

6-110
    - reset personal access token:
        git credential-osxkeychain erase (MacOS keychain)
        host=github.com
        protocol=https
        double enter
    - git clone link . ----> will add the content of the repo in the current folder.
    - git clone link -------> will create a new folder (repo name) and the content inside it.
    - personal access token will be removed after a while

6-111
    - collaborators: from repo settings, manage access, invite collaborators.
    - private repo: the collaborators can see now the private repo which they invited to work on of the owner.

7-117
    - check MDN documents and website structure.

7-118
    - if you have inline and block elements on the same line, make them both blocks, <div><a></a></div>
    - link of shared css before the page css
    - try to put the body margin to 0.
    - text-shadow: same as box-shadow but for the text.

7-120
    - flex-flow: row no-wrap; flex-direction and flex-wrap

7-124
    - background-size: cover, to cover the entire element
    - background-position: center.

7-129
    - box-sizing: in sizing it is better to include the border and the padding in the width calculations, so box-sizing: border-box.

7-130
    - to move hero image, make the header position absolute (out of the document flow), then it will take its place.
    - don't forget to fix the box sizing prop.
    - try always to add text and box shadow as will as the border radius.

7-132
    - for travel website, highlight section, you can consider the images blocks as un-ordered list <ul>
    - for the ul use an ID to distinguish it, but for LIs use classes.
    - try to put the IDs and Classes during building the html structure, the section has ID, the UL has ID, the li has class.

7-134
    - minimizing the height of 2 images with the same width, the taller image will have the smaller width.
    this is because when you set the same height, the taller one will minimize the width as you minimizing the height,
    so the width will keep shrink more the shortest one.
    - putting the image width 100% inside flex row, will give them the same width. (divided by their number)

7-135
    - object-fit prop: fill is the default.
        fill: image resized to fill the container, aspect ratio will be changed
        contain: aspect ration remains, but image will be resized to fit the container, it will leave empty spaces.
        cover: aspect ratio remains, it will fill the container, but it will be cropped because it is zoomed (bigger than the container).ยก

7-138
    - there is a white space between the 2 sections, it is related to margin collapsing.
    - it happen because of the h2 element margin, it overwrite the parent margin.
    - since the parent (section) has no margin, it collapsed.
    - adding padding to the parent section will solve the issue and will contain every thing inside it.

7-139
    - modern websites background are not solid simple colors, it more vivid
    - linear gradient: will give much better background.
    - it can be added using css functions linear-gradient:

7-142
    - use margin: when the needed is the space between elements. (left and right)
    - use padding: for space with the border and when it affect the height of the component.

7-145
    - position: static, is the default, so when needed for nav for example to remove the position, use it to overwrite the behavior.

7-147
    - border radius: images inside radius border (image inside li or a container) exceeds the border (overflow) so it need to be handled.
    - default css values, it is needed when we want to overwrite another behavior, to reset the behavior.
    - overflow: default is visible.
    - overflow: hidden (for the container). to hide the extra part which is outside the radius.

7-150
    - css grid display: built-in display in css.
    - display: grid
    - grid-template-columns: 1fr, 2fr, 100px  --> it will make 3 columns, the last one will be 100 px, the remaining will be divided by 3,
        1 for the first and 2 for the second.
    - gap : 100px (between rows), 200px (between the columns)

7-151
    - li:first-of-type: pseudo selector, which will select the first li element in the unordered list.
    - li:nth-of-type(3): selects the third element of the same type (li)
    - grid-column: 1 / 3; used with the element inside the grid, to take the position of the first 2 columns ( from 1 to 3 since 2 is the line between them)
    - grid-column: 1 / span 3, it tells that the element will take 3 columns starting from the first one.

7-153
    - UTF-8: you can use all symbols from UTF-8
    - symbols can be used by their number, hexadecimal or html entity
    - entity: &larr;
    - decimal number: &#8592;
    - hexadecimal: &#x2190;
    - read this https://www.w3schools.com/charsets/default.asp

7-156
    - More about the position property => https://academind.com/tutorials/the-position-property/

    - Flexbox - Flex Container => https://academind.com/tutorials/flexbox-basics-container/

    - Flexbox - Flex Items => https://academind.com/tutorials/flexbox-flex-items/

    - Comparing Flexbox and the Grid => https://academind.com/tutorials/css-grid-vs-flexbox/

8-161
    - Add an id to the header, because when add the mobile design you need another header.
    - Add section for the core elements, since there might be other sections.
    - Add article inside the li, to be more semantic, individual content inside the individual card (image, h2, button)
    - Put the h2 and the button in one div to make the styling easier.
    - buttons, use anchor tag with btn class for button behavior.

8-163
    - flex used for 1 dimensional layout.
    - grid used for 2 dimensional layout.
    - use grid for display the main section.

8-168
    - em unit: if it is for font-size, then it calculated relative to the parent font-size,
        if it used for other property than the font-size, it will be calculated relative to the font-size of the same element.
    - percentage unit, in case of font-size, it will be relative to the font-size of the parent
        if it used for other property, such as the padding, it will be relative to the width of the parent.

8-171
    - Responsive, Mobile first, Desktop first.
    - portrait: smartphone(480px), tablet(768px).
    - landscape notebook (1024px), desktop(1200px), TV(>1200).
    - Mobile first: use it for traditional approach, office based audience and feature-rich websites.
    - Mobile first: ( mobile --->768px--->1200px----> desktop), use min-width with @media
    - Desktop first: use it for functional approach, lifestyle/news audience and content based.
    - Desktop first: (desktop --->1200px--->768px----> mobile), use max-width with @media

8-172
    - media query should be in the end of the css file to not be overwritten by the original css.
    - make the order of the rules in the media query same as in css file.

8-174
    - internal link: Add defined ID to the URL --> href="#id"
    - target selector: Activate css rule if defined ID selected in the URL. --> #id:target

8-175
    - menu button: it is better to be anchor since it will make navigation.
    - inline elements (span): inline elements occupy as much space as needed,
        if there is no content they will not be displayed even if there is height and width and background color.
    - burger menu: it can be done without flex, you can change the view of the span elements to be "block".

8-176
    - use aside tag for the side drawer.
    - side-drawer should occupy the entire page.
    - side-drawer should be taken out of the document flow (position fixed or absolute)
    - display none or removing the fixed position will return hide the drawer and show the initial page.

8-177
    - url fragment (URL.hash): is a piece of the url,
    The hash property of the URL interface is a USVString containing a '#' followed by the fragment identifier of the URL.

8-178
    - css target selector: #side-drawer:target  --> works if this ID (side-drawer) added to the url in the browser
    - in case of showing the side-drawer: first make the display: none, then when selector work make it block.


9-185
    - make website beautiful
    - try to put more empty space around the text content
    - try to minimize the margin between related elements

9-186
    - font family, size, weight and color are important aspects for fonts
    - when selecting font from google, choose the category then use the font with more styles, because it has more details,
    and this will minimize the number of fonts.
    - when specify font family, make the fall back font the same category of the font, sans-serif or monospace

9-187
    - always use grey in backgrounds and make greyish black, not pure black, also it keep the focus of other header h1 or titles.
    - primary color, this color used for the site main color
    - accent colors:

9-188
    - CSS variables: --color-grey-100
    - values start from 50 to 900, 50 is light color value and 900 is dark level value

9-189
    - if you want to make size variables, font size for example, then --size-1 will equal to the smallest font in the page, and --size-5 will be the largest

9-192
    - transformation: move/change appearance of element, e.g hover, so when hover for example, set scale(2) to make the size bigger the double.
     or rotate(180) to rotate the element. (Applied to the event triggering the transition)
    - transition: transition from initial to transformed state (Applied to the initial state)
    - shorthand property: is the property with more than one value for more than one property, like transition, box-shadow, border: 1px solid red;
    - transition: transformation 0.5s ease-out 1s;
        1- property, this transition will applied to the transformation which put before on the same element, which in this case the size increasing.
        2- duration, how long the transition should take.
        3- timing function, ease-out, start fast and end slowly
        4- delay, should the transaction start directly?
    transition: background-color 0.5s ease-in-out;
        .button {
            transition: background-color 0.5s ease-in-out;
        }
        .button:hover {
            background-color: var(--color-primary-700);
        }

    transition: transform 0.5s ease-out;
        .card-container {
            transition: transform 0.5s ease-out;
        }
        .card-container:hover {
            transform: scale(1.05)
        }

    - ** important: you can't put 2 transition to the same selector, because it will be overwritten.

9-193
    - SVG: Scalable Vector Units, XML markup language to describe 2D vector graphics.

10-199
    - form action: if did not filled it will add a "?" question mark to the same link and make the request.
    - action added after the domain in the URL
    - methods: GET, POST
    - GET, might be used to get a new page with different data,
    - POST request, by default , there is no data will be attached to the request, unless you define name for the input elements.
    - POST method: ---> Form Data in the body of the request. (in the payload tab)
    - GET method: ----> Query String Parameters, and will be in the URL text after the "?" and separated by "&". (in the payload tab)

10-200
    - box-sizing: border-box; watch for it in styling.

10-201
    - using "for" attribute with labels, if you clicked the label it will auto focus the input element.

10-202
    - font: inherit, it will overwrite the default font assigned to the buttons
    - active pseudo-class: when the user start pressing the mouse.
    - focus pseudo-class: when the input focused.
    - for form styling, added background-color, font color and border, also styled the focus pseudo-class

10-203
    - email input type: it helps in writing email, and the phone keyboard changed to support email easily, also it helps in validation.
    - number input: helps in writing numbers, only numbers and again, mobile keyboard changes to numbers page.
    - types: text, email, number, password, radio, checkbox, file

10-204
    - Number input step: define how much the increasing or decreasing steps on the element.

10-205
    - CSS width auto, will make the width based on the content.

10-206
    - radio and checkbox default selected value is "on"
    - in case of checkbox, use the same name, and different values, contact=email, contact=phone

10-209
    - think in dividing the form into sections related fields, and if there is a list put it inside a "ul"

10-210
    - buttons inside form: default behavior is form submit
    - to overwrite the default behavior, change the type to button.
    - to clear the form's data, change button type to reset.

10-211
    - boolean attribute: it is attribute with yes or no of existence, like enabled, hidden, novalidate, required
    - novalidate form attribute: will disable default form validation, but will not allow number input to have characters.
    - required: validation.
    - validations: required, minlength, min, max,
    - min and max for number fields is a number
    - min and max for date fields is a date with YYYY-MM-DD format (2000-05-23)

10-212
    - placeholder: it is better to put example (hint), Ayman ghaith will indicate to put first and last name. and should not be the same of the label.
    - placeholder should not replace the label, because it is not semantic, and also if there is too many fields you will forget what was the field for.
    - textarea resize: none, to prevent the resizing which might corrupt the design.
    - outline:none, in case you don't want the focus effect the border.

11-228
    - script tag, if linked to outer file, you can't put js code inside it <script src="...">NO CODE</script>

12-255
    - window global variable: give information related to the active browser window/tab
    - all sub-variables can be accessed directly (as global variables) without the window object (window.alert() === alert ())
    this is special case for window variable.
    - document global variable: nested object of window, window.document
    - holds information about the html (loaded website)

12-256
    - DOM: Data Object Model
    - data representation of the parsed html code on the browser

12-257
    - Extracting the document object using console.log(document) it will present it in HTML like notation
    - But to extract it as JS object, use console.dir(document).
    - consol.dir

12-258
    - document has the body and head main elements with other objects, inside them you will find children, check them.

12-259
    - defer: attribute for the script tag which allow to put the script in the head section
    and make the js script execution waits until the entire document to be parsed , then execute it.

12-260
    - 2 ways to select element through js: 1- drilling document object, 2- using query elements.

12-261
    - element.childNodes : get the NodeList, the html elements plus text (spaces between 2 elements, or the text without element) and scripts inside the element .
    - element.children : get the HTMLCollection, the html elements inside the element.
    - element.firstElementChild: get the first of the HTMLCollection (html elements).
    - element.firstChild: get the first of the nodes (NodeList)

12-262
    - document.querySelector('a'): can take the same CSS selectors.
    - Important, it only give the first a element, even if there is more than one element match the selector.
    - document.querySelectorAll('a'): retrieve an Array with all the matched elements not only the first one.

12-266
    - nextElementSibling: retrieve the next sibling element, also there is the previous one.

12-269
    - create new element: document.createElement("a").
    - insert element: select the parent first then parent.append(newAnchorElement);

12-270
    - remove element: select the element then remove it. firstH1Element.remove()

12-271
    - Appending an existing element, will move the element automatically (remove it from it's place, and insert in the new position, after the last one)

12-272
    - textContent of element, shows just the text of that element and if there is anchor child, it will show only the text of it.
    <p> this is an example of <a>link</a></p>, here the text content will be "this is an example of link"
    - and if you assigned it a value like, textContent = <p> this is an example of <a>link</a></p>, it will be shown on the browser as is.
    - innerHTML will show the inner element. here the innerHTML will be "<p> this is an example of <a>link</a></p>"
    - if you don't need direct access to the element, then innerHTML will be much better.
    - for HTML concatenation, use string with plus then go to the next line:
    innerHTML = "this is a long text " +
        "which can be on multiple lines inside the code.
    - document.createElement(): gives you direct access to the created element - you can use that access to configure it via its properties and methods (e.g. add event listener).

12-274
    - use addEventListener for element, with the event name and the callback function.
    - callback function should be only the name of the function without the parentheses, to prevent calling it once the event added to the element,
    it will be called when the event triggered which is the correct behavior.

12-275
    - ** input event vs keyup event: input event will trigger any input change in the field even if there was copy paste value
    but keyup will only work when keyboard is used.

12-276
    - we can get the value of element has an event attached to by:
    1) get the element using querySelector.
    2) get the element using the event argument. passed automatically by the browser once the event triggered.

    - each event type has different event variable with different properties, but always there is the target property.

12-277
    - vertical-align: middle; can be used to align elements.
    - maxlength: get it from the element attribute to be dynamic.
        let remainingChars = productNameInputElement.maxLength - enteredTextLength;

12-279
    - change element style by JS:
    1) change the style property of element.
        element.style.backgroundColor = 'red' ---> note backgroundColor not background-color because it is JS variable, and red between quotation to not treated as variable.
    2) add css class


13-286
    - comparison operators can be used with strings 'a'<'b' true. 'c' < 'b' false, it will show characters order.
    'cb' > 'ab' --> true because c is greater (after) a (ascii comparison)

13-290
    - remainingCharsElement.classList.remove('warning', 'error'); ( you can put more than class to the remove class list)

13-291
    - flag variables: variables includes true false value.
    - isLoggedIn the name of the flag variable should look like a question with true false answer.

13-292
    - Truthy Falsy values:
    "asdfadf" ->> true ("asdfasdf".length > 0) it is just a shortcut.
    "" ---> false
    "0" ---> true
    0 ---> false

13-293
    - Loops:
    1) for
    2) for .. of -->> used with arrays
    3) for .. in -->> used with objects
    4) while

    - for (let i=0; i < 10; i++) ---> i stands for iteration.

13-295
    - ** for (const user of users) ----> here we are using constant since a new variable will be created in each iteration

13-296
    - confirm(), same as alert() but with yes-no question buttons.

13-299
    - as a convention name files like : loops-in-action.js

13-300
    - querySelectorAll: select all the element matches the query, not the first one only.

13-301
    - to clear all children, just make the innerHTML equal to empty
    userInfoList.innerHTML = '';

13-302
    - convert string number to number using "+" +"5"---> 5

13-306
    - Make the players, ordered list, because it mention player 1 then player 2 (it gives a meaning, symantec)
    - also the content of each player it is better to include it inside article tag
    - Overlay: when it comes to overlay, it is better to make it with aside element.
    also when it comes to complimentary content, or interaction element which is not the main content.

13-307
    - always remember that you might need header inside the aside element, so in overlay for example, so it is better to give id for headers.
    - for header margin, it is nice to put 5% from left and right, to make it smaller with smaller screens, but for top and bottom it is ok to have it fixed.


14-

15-




Important links:
- netlify drop: https://app.netlify.com/drop
- create favicon: favicon generator, favicon.io


For the  DSP Team: Roberto Druetto
for Basheer Al Momani: Chris Donaghey


Removed appearance and settings cards headers
